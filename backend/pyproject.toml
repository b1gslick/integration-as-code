[tool.poetry]
name = "backend"
version = "0.1.0"
description = ""
authors = ["Sergei Timokhin"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = { extras = ["standard"], version = "^0.115.4" }
uvicorn = { extras = ["standard"], version = "^0.32.0" }
sqlalchemy = "^2.0.36"
pydantic-settings = "^2.6.1"
databases = "^0.9.0"
python-dotenv = "^1.0.1"
psycopg2-binary = "^2.9.10"
requests = "^2.32.3"
httpx = "^0.27.2"
testcontainers = "^4.8.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.poetry.group.test.dependencies]
pytest = "7.4.0"
pytest-asyncio = "0.21.0"
pytest-mock = "3.11.1"
pytest-cov = "4.1.0"
pytest-env = "0.8.2"
pre-commit = "3.3.3"
coverage = "^7.4.4"
faker = "^28.4.1"
testcontainers = "^4.8.1"

[tool.pytest.ini_options]
asyncio_mode = "strict"
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)s] %(filename)s:%(lineno)s %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
env = [
  'D:LOG_LEVEL=WARN',
  'D:db_drivername=postgresql',
  'D:db_username=postgres',
  'D:db_password=postgres',
  'D:db_name=postgres',
  'D:db_host=localhost',
  'D:db_port=5432',
  'D:hash_service=http://localhost:8080',
]
testpaths = ["tests"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
  "E",      # pycodestyle errors
  "W",      # pycodestyle warnings
  "F",      # pyflakes
  "I",      # isort
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "UP",     # pyupgrade
  "ARG001", # unused arguments in functions
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "W191", # indentation contains tabs
  "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
